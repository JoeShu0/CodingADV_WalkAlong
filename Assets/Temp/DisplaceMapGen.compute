// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> Displace;
RWTexture2D<float4> Normal;
float3 CenterPos;
float LODSize;
int LODIndex;
float _Time;
int WaveCount;

struct Wave
{
    float WaveLength;
    float Amplitude;
    float Speed;
    float2 Direction;
};
StructuredBuffer<Wave> WavesBuffer;
/*
struct WaveBatched
{
    float4 WaveLengths;
    float4 Steepnesses;
    float4 DirectionX;
    float4 DirectionY;
};
StructuredBuffer<WaveBatched> WavesBatchBuffer;
*/
struct GerstnerOut
{
    float3 displacement;
    float3 normalVector;
    float3 tangentVector;
};

GerstnerOut GetWaveSum(float3 OriginalWPos)
{
    float PI =3.14159265f; 

    float3 Displace = float3(0.0f,0.0f,0.0f);
    float3 tangent = float3(1.0f, 0.0f, 0.0f);
    float3 binormal = float3(0.0f, 0.0f, 1.0f);

    for(int i=0;i<WaveCount;i++)
    {
        
        float _WaveLength = WavesBuffer[i].WaveLength;
        float k = 2 * PI / _WaveLength;
        float _Amplitude = WavesBuffer[i].Amplitude;
        float _Steepness = _Amplitude * k;
        float _Speed = WavesBuffer[i].Speed;
        float2 _Direction = normalize(WavesBuffer[i].Direction);
        float f = k * (dot(OriginalWPos, float3(_Direction.x, 0 , _Direction.y)) - _Time* _Speed);

        float Wx = _Amplitude * cos(f) * _Direction.x;
        float Wz = _Amplitude * cos(f) * _Direction.y;
        float Wy = _Amplitude * sin(f);

        Displace += float3(Wx, Wy, Wz);

        tangent += float3( - _Direction.x * _Direction.x*(_Steepness * sin(f)),
                                _Direction.x * (_Steepness * cos(f)),
                                - _Direction.x * _Direction.y * (_Steepness * sin(f)));

        binormal += float3(-_Direction.x * _Direction.y * (_Steepness * sin(f)),
                                _Direction.y * (_Steepness * cos(f)),
                                 - _Direction.x * _Direction.x * (_Steepness * sin(f)));

    }
    /*
    //fixed wave attenuation
    float4 wt = float4(1, 1, 1, 1);

    for (int n = 0; n < fmod(WaveCount, 4); n++)
    {
        
        float4 ks = 2 * PI / _WaveLengths[n];
        float4 Amplitudes = _Steepnesses[n] / ks;
        //later we have to this sqrt into CPU and integret it into Dir
        float4 Speeds = 0.1f;//sqrt(9.8 / k);
        float4 fs = ks * ((OriginalWPos.x * _DirXs[n] + OriginalWPos.z * _DirZs[n]) - _Time * Speeds);
        float4 Wxs = Amplitudes * cos(fs) * _DirXs[n];
        float4 Wzs = Amplitudes * cos(fs) * _DirZs[n];
        float4 Wys = Amplitudes * sin(fs);

        Displace += float3(dot(Wxs, wt), dot(Wys, wt), dot(Wzs, wt));
        Displace += ks.xyz;
        

        Displace += float3(WavesBatchBuffer[i].x, WavesBatchBuffer[i].y, WavesBatchBuffer[i].z);
    }
    */
    
    float3 normal = normalize(cross(binormal, tangent));
    tangent = normalize(tangent);
    
    GerstnerOut ReturnData;
    ReturnData.displacement = Displace;
    ReturnData.normalVector = normal;
    ReturnData.tangentVector = tangent;

    return ReturnData;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    uint width, height;
    Displace.GetDimensions(width, height);

    //D3D CoordSystem
    float3 WPos = float3((id.x / float(width) - 0.5f) * LODSize, 0.0f, (id.y / float(height) - 0.5f) * LODSize) + CenterPos;

    //WavesBuffer[0].WaveLength
    GerstnerOut outputWaveVectors = GetWaveSum(WPos);

    float3 Displacement = outputWaveVectors.displacement;
    float3 Normalout = outputWaveVectors.normalVector;
    float3 Tangentout = outputWaveVectors.tangentVector;

    Displace[id.xy] = float4(Displacement,1.0f);
    Normal[id.xy] = float4(Normalout,1.0f);

    //debug
    //Displace[id.xy] = _WaveLengths[10];
    //Result[id.xy] = float4(1.0f, 0.0f, 0.0f, 1.0f);
    /*
    if (length(WPos-float3(25,0,10)) < 12.0f)
        Result[id.xy] = float4(1, 0, 0, 0);
    else
        Result[id.xy] = float4(0.5f, 0.5f, 0.5f, 1.0f);
    */
        
}
