// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
int MaxMarchStep;
int RenderMode;
float DepthScale;
int ObjectCount;
float4 LightPI;
float SmoothFactor;


struct Ray
{
    float3 origin;
    float3 direction;
    //float length;
};

struct ObjData
{
    int type;
    int OpType;
    float3 origin;
    float3 upvector;
    float3 size;
    float4 mat;
};
StructuredBuffer<ObjData> RayObjectsBuffer;
//StructuredBuffer<float> TestBuffer;

float SDstToSphere(float3 P, float3 SOrigin, float3 SRadius)
{
    return length(SOrigin - P) - SRadius.x;
}

float SDstToBox(float3 P, float3 BOrigin, float3 BSize)
{
    float3 offset = abs(P - BOrigin) - BSize;
    float unsignedDst = length(max(offset, 0));
    float3 InsideV = min(offset, 0);
    float InsideDst = max(max(InsideV.x, InsideV.y), InsideV.z);
    return unsignedDst + InsideDst;
}



void GetObjMaterialProperty(Ray ray, inout float4 _basecolor)
{
    float TotalDst = -1.0f;
    for (int i = 0; i < ObjectCount; i++)
    {
        float Dst = TotalDst;
        float3 objorigin = (float3)RayObjectsBuffer[i].origin;
        float3 objsize = (float3)RayObjectsBuffer[i].size;
        switch (RayObjectsBuffer[i].type)
        {
        case 0:
            break;
        case 1:
            Dst = SDstToSphere((float3)ray.origin, objorigin, objsize * 0.5);
            break;
        case 2:
            Dst = SDstToBox((float3)ray.origin, objorigin, objsize * 0.5f);
            break;
        }
        if (i == 0)
        {
            TotalDst = Dst;
            _basecolor = RayObjectsBuffer[i].mat;
        }
        switch (RayObjectsBuffer[i].OpType)
        {
        case 0:
        {

            //TotalDst = min(TotalDst, Dst);
            //SmoothUnion
            float h = clamp(0.5 + 0.5 * (TotalDst - Dst) / SmoothFactor, 0.0f, 1.0f);
            _basecolor = lerp(_basecolor, RayObjectsBuffer[i].mat, h);
            break;
        }
        case 1:
        {
            //TotalDst = max(TotalDst, -Dst);
            float h = clamp(0.5 - 0.5 * (TotalDst + Dst) / SmoothFactor, 0.0f, 1.0f);
            _basecolor = lerp(_basecolor, RayObjectsBuffer[i].mat, h);
            break;
        }
        case 2:
        {
            //TotalDst = max(TotalDst, Dst);
            float h = clamp(0.5 - 0.5 * (TotalDst - Dst) / SmoothFactor, 0.0f, 1.0f);
            _basecolor = lerp(_basecolor, RayObjectsBuffer[i].mat, h);
            break;
        }

        }

    }
}


float3 GetObjectNormal(Ray ray, int CIndex)
{
    switch (RayObjectsBuffer[CIndex].type)
        {
            case 0:
            {
                return float3(0.0f,0.0f,0.0f);
                break;
            }
            case 1:
            {
                //Sphere
                float3 Normal;
                Normal = normalize(ray.origin - RayObjectsBuffer[CIndex].origin);
                return RayObjectsBuffer[CIndex].OpType == 1 ? -Normal : Normal;
                break;
            }
            case 2:
            {
                //box
                float3 pointVec = normalize(ray.origin - RayObjectsBuffer[CIndex].origin) / RayObjectsBuffer[CIndex].size;
                float longAxislength = max(max(abs(pointVec.x),abs(pointVec.y)),abs(pointVec.z));
                float3 Normal;
                if(pointVec.x == longAxislength || pointVec.x == -longAxislength)
                    Normal = normalize(pointVec * float3(1.0f,0.0f,0.0f));
                else if(pointVec.y == longAxislength || pointVec.y == -longAxislength)
                    Normal = normalize(pointVec * float3(0.0f,1.0f,0.0f));
                else
                    Normal = normalize(pointVec * float3(0.0f,0.0f,1.0f));
                return RayObjectsBuffer[CIndex].OpType == 1 ? -Normal : Normal;
                break;
            }
        }
    return float3(0.0f,0.0f,0.0f);
}



Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ///ray.length = length;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 CameraWS = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).rgb;
    //here we are using the center if a pixel as sample point, so we add (0.5, 0.5) to uv 
    float3 directionCS = mul(_CameraInverseProjection, float4((uv) * 2.0f - 1.0f, 0.0f, 1.0f)).rgb;
    //wy when doing cam to world the last element of float4 has to be 0.0f? No translation?
    float3 direction = normalize(mul(_CameraToWorld, float4(directionCS, 0.0f))).rgb;

    return CreateRay(CameraWS, direction);
}

float GetSceneSDst(Ray ray)
{
    float TotalDst = -1.0f;
    for(int i = 0; i < ObjectCount; i++)
    {
        float Dst = TotalDst;
        float3 objorigin = (float3)RayObjectsBuffer[i].origin;
        float3 objsize = (float3)RayObjectsBuffer[i].size;
        switch (RayObjectsBuffer[i].type)
        {
            case 0:
                break;
            case 1:
                Dst = SDstToSphere((float3)ray.origin, objorigin, objsize * 0.5);
                break;
            case 2:
                Dst = SDstToBox((float3)ray.origin, objorigin, objsize * 0.5f);
                break;
        }
        if (i == 0)
        {
            TotalDst = Dst;
        }
        switch(RayObjectsBuffer[i].OpType)
        {
            case 0:
            {
                
                //TotalDst = min(TotalDst, Dst);
                //SmoothUnion
                float h = clamp(0.5 + 0.5 * (TotalDst - Dst) / SmoothFactor, 0.0f, 1.0f);
                TotalDst = lerp(TotalDst, Dst, h) - SmoothFactor * h * (1.0f - h);
                break;
            }
            case 1:
            {
                //TotalDst = max(TotalDst, -Dst);
                float h = clamp(0.5 - 0.5 * (TotalDst + Dst) / SmoothFactor, 0.0f, 1.0f);
                TotalDst = lerp(TotalDst, -Dst, h) + SmoothFactor * h * (1.0f - h);
                break;
            }
            case 2:
            {
                //TotalDst = max(TotalDst, Dst);
                float h = clamp(0.5 - 0.5 * (TotalDst - Dst) / SmoothFactor, 0.0f, 1.0f);
                TotalDst = lerp(TotalDst, Dst, h) + SmoothFactor * h * (1.0f - h);
                break;
            }
            
        }
        
    }
    return TotalDst;
}

float4 GetSceneNormal(Ray ray)
{
    float D0 = GetSceneSDst(ray);
    const float eps = 0.0001f;
    float3 D1 = float3(
        GetSceneSDst(CreateRay(ray.origin - float3(eps, 0, 0), float3(0, 0, 0))),
        GetSceneSDst(CreateRay(ray.origin - float3(0, eps, 0), float3(0, 0, 0))),
        GetSceneSDst(CreateRay(ray.origin - float3(0, 0, eps), float3(0, 0, 0)))
        );
    return float4(normalize(D0 - D1), 1.0f);
}

bool GetSceneRenderData(Ray ray, inout float4 _color, inout float4 _normal)
{
    float SDst = GetSceneSDst(ray);
    if(SDst<0.05f)
    {
        GetObjMaterialProperty(ray, _color);
        _normal = GetSceneNormal(ray);
        return true;
    }
    else
    {
        _color = float4(0.0f,0.0f,0.0f,0.0f);
        _normal = float4(0.0f,0.0f,0.0f,1.0f);
        return false;
    }
        
}

bool MarchRay(inout Ray ray)
{
    //int CIndex = -1;
    float SDst = GetSceneSDst(ray);

    ray = CreateRay(ray.origin+ray.direction*SDst, ray.direction);

    return SDst>0.01f ? true : false;
}

float MarchShadowRay(inout Ray EndRay)
{
    //Ray ray = EndRay;
    float3 lightDir = LightPI.rgb - EndRay.origin;
    float DTL = length(lightDir);
    Ray ray = CreateRay(EndRay.origin + normalize(lightDir)*0.25f, normalize(lightDir));
    float Shadow = 0.5f;
    for (int i = 0; i < MaxMarchStep ; i++)
    {
        float SDst = GetSceneSDst(ray);
        ray = CreateRay(ray.origin + ray.direction * SDst, ray.direction);

        if (length(ray.origin - EndRay.origin) > DTL)
        {
            Shadow = 1.0f;
            break;
        }
        if (SDst < 0.0f)
        {
            Shadow = 0.5f;
            break;
        }   
    }
    return Shadow;
   
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = (id.xy + float2(0.5f,0.5f)) / float2(width, height);
    Ray OriginRay = CreateCameraRay(uv);
    Ray EndRay = OriginRay;
    for(int i = 0; i < MaxMarchStep; i++)
    {
        if (! MarchRay(EndRay))
            break;
    }
    
    float4 _color;
    float4 _normal;
    float _specualr;
    float Att;
    if (GetSceneRenderData(EndRay, _color, _normal))
    {
        //_normal = float4((_normal + float3(1.0f, 1.0f, 1.0f)) * 0.5f, 1.0f);

        float3 VToL = LightPI.rgb - EndRay.origin;
        float DistToL = length(VToL);
        float3 DirToL = VToL / DistToL;
        
        const float3 w = _normal.rgb * dot(DirToL, _normal.rgb);
        const float3 r = normalize(w * 2.0f - DirToL);

        _specualr = LightPI.a * pow(max(0.0f, dot(r, -OriginRay.direction)),2.0f);
        Att = 50.0f / (DistToL * DistToL);
    }
    else
    {
        _normal = float4((-OriginRay.direction + float3(1.0f, 1.0f, 1.0f)) * 0.5f, 1.0f);
        _color = float4((-OriginRay.direction + float3(1.0f, 1.0f, 1.0f)) * 0.5f, 1.0f);
        _specualr = 0.0f;
    }

    
    float ShadowMul = MarchShadowRay(EndRay);

    switch (RenderMode)
    {
 
        case 0:
        {
            float Depth = length(EndRay.origin - OriginRay.origin);
            Result[id.xy] = float4(Depth / DepthScale, 0.0f, 0.0f, 1.0f);
            break;
        }
        case 1:
        {
            Result[id.xy] = float4((_normal + float3(1.0f, 1.0f, 1.0f)) * 0.5f, 1.0f);;
            break;
        }
        case 2:
        {
            Result[id.xy] = _color * Att * ShadowMul + _specualr;
            break;
        }
    }

    //Result[id.xy] = ShadowMul;
    
    //float Dst = SDstToSphere(ray.origin, RayObjectsBuffer[1].origin, RayObjectsBuffer[1].size);
    //float Dst01 = SDstToBox(ray.origin, RayObjectsBuffer[0].origin, RayObjectsBuffer[0].size);

    //Result[id.xy] = float4(TestBuffer[0], TestBuffer[1], 0.0f, 1.0f);
    
}
